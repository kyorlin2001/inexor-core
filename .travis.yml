###########################
####### README FIRST! #####
###########################
# This file should only be edited in our main repository (inexor-core)
# You are doing something wrong
# if you are trying to edit this file in the master branch of ci-prebuilds.
#
# Our automation is grabbing the version of this file from our main repository
# and commit it with automatic changes to ci-prebuilds
# and only when Conan dependencies are actually changed
# in order to not cause unnecessary rebuilds.
#
# The ci-prebuilds version will have un-comment every line starting with #CI(followed by an empty space)
# e.g. #CI echo this only gets executed in ci-prebuilds
#
# The ci-prebuilds version will have every line removed containing #CIDELETE
# e.g. #CIDELETE this line is not visible in ci-prebuilds aka. won't get executed
#

notifications:
  email:
    on_success: never
    on_failure: change

git:
  depth: 15

language: cpp

linux: &linux
  os: linux
  sudo: required
  dist: trusty
  services:
    - docker

osx: &osx
  os: osx
  sudo: false
  language: generic

core: &core
  jobs:
    include:
    # We run the following jobs in our main repository:
      - stage: "Conan prebuilds triggering"
        os: linux
        dist: trusty
        sudo: false
        env: DOCKER="NODOCKER" conan_prebuilds="true"
      - stage: "Building & Testing"
        <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="5.0" COMPILURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-clang050" NIGHTLY="true" #CIDELETE
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="7" COMPILER_CION="Release" TARGET="compile" DOCKER="ubuntu-bionic-gcc07" NIGHTLY="true" #CIDELETE
      - stage: "Create GitHub Tag"
        if: branch = master AND tag is blank AND fork is faepo = head_repo AND type != pull_request  #CIDELETE
        os: linux
        sudo: false
        dist: trusty
        env: DOCKER="NODOCKER" TARGET=new_version_tagger
        branches:
          only:
            - master
      #- os: linux
       #vsudo: false
       #vdist: trusty
       #venv: DOCKER="NODOCKER" TARGET=apidoc

ciprebuilds: &ciprebuilds
  jobs:
    include:
    # Our main compilers we run tests for
      - <<: *osx
        osx_image: xcode9.2
        env: COMPILER="apple-clang" COMPILER_VERSION="9.0" COMPILER_CONFIGURATION="Release" TARGET="macos" DOCKER="NODOCKER" NIGHTLY="conan"
      - <<: *osx
        osx_image: xcode9.2
        env: COMPILER="apple-clang" COMPILER_VERSION="9.0" COMPILER_CONFIGURATION="Debug" TARGET="macos" DOCKER="NODOCKER" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="8" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-gcc08" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="8" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-gcc08" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="6.0" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-clang060" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="6.0" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-clang060" NIGHTLY="conan"

    # Older compilers we compile Conan packages for, to speed things up for other people
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="5.0" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-clang050" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="5.0" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-clang050" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="7" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-gcc07" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="7" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-gcc07" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="4.0" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-clang040" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="4.0" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-clang040" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="6" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-gcc06" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="6" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-gcc06" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="5" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-gcc05" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="gcc" COMPILER_VERSION="5" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-gcc05" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="3.9" COMPILER_CONFIGURATION="Release" TARGET="compile" DOCKER="ubuntu-bionic-clang039" NIGHTLY="conan"
      - <<: *linux
        env: COMPILER="clang" COMPILER_VERSION="3.9" COMPILER_CONFIGURATION="Debug" TARGET="compile" DOCKER="ubuntu-bionic-clang039" NIGHTLY="conan"
    fast_finish: true # don't wait for allow_failures to fail, gives faster response
    allow_failures:
      - os: osx
      #CI - os: linux



# We run the following jobs in our main repository:    #CIDELETE
<<: *core  #CIDELETE

# We run the following jobs in ci-prebuilds:
#CI <<: *ciprebuilds


before_install:
  # Get our CI Docker image
  - if ! [[ "${DOCKER}" == 'NODOCKER' ]]; then
        sudo docker pull inexorgame/ci-docker':'${DOCKER} ;
    fi

script:
  - set -e;
    if [ "${conan_prebuilds}" == "true" ]; then
      bash ./tool/travis_conditional_conan_package_generating.sh ;
    else
      echo "${conan_prebuilds}" ;
    fi
  - if [ "${GLOBAL_NIGHTLY}" == "false" ]; then
      NIGHTLY="false";
    fi
  - if [ "${GLOBAL_NIGHTLY}" == "conanforcerebuild" ]; then
      TARGET="conanforcerebuild";
    fi
  - if [ "${GLOBAL_NIGHTLY}" == "conan" ]; then
      NIGHTLY_USER="${CONAN_USER}";
      NIGHTLY_PASSWORD="${CONAN_PASSWORD}";
    else
      NIGHTLY_USER="${FTP_USER}";
      NIGHTLY_PASSWORD="${FTP_PASSWORD}";
    fi
  - if [[ "${TRAVIS_REPO_SLUG}" == "inexorgame/inexor-core" ]]; then
      if [[ ! "${TRAVIS_PULL_REQUEST}" == false ]]; then
        echo >&2 -e "Skipping build, because this is a pull " \
          "request with a branch in the main repo.\n"         \
          "This means, there should already be a CI job for " \
          "this branch. No need to do things twice.";
        exit 0;
      fi;
    fi;
    if ! [[ "${DOCKER}" == "NODOCKER" ]]; then
      sudo docker run -v $(pwd)':'/inexor --net=host -it inexorgame/ci-docker':'${DOCKER} /inexor/${RELATIVE_PATH}tool/travis.sh ${TARGET} ${COMPILER} ${COMPILER_VERSION} ${COMPILER_CONFIGURATION} ${NIGHTLY} ${NIGHTLY_USER} ${NIGHTLY_PASSWORD} ${FTP_DOMAIN};
    fi;
    if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
      bash ${RELATIVE_PATH}tool/travis_macos.sh;
    fi;
  - if [ "${TARGET}" == "new_version_tagger" ]; then
        bash ./tool/travis.sh ${TARGET} ${COMPILER} ${COMPILER_VERSION} ${COMPILER_CONFIGURATION} ${NIGHTLY} ${NIGHTLY_USER} ${NIGHTLY_PASSWORD} ${FTP_DOMAIN};
    fi

deploy:
  skip_cleanup: true
  provider: releases
  api_key:
    - secure: DgFzibKfjjD4v6zP51sjyP+chyBNKA6D3LHz4+pKN2mSBLSFeqK29z+38TlIOJHSpq6pWdvxqHjn+vQuYV1v/oqri0AVpo0kxFojtNaIFo1Dc/Sfv76V7X6p9+JaSRtKtqCjOV7QP9fftyUgSu1Bq67fwuv6QvDgOzdQIcV87bA=
  file_glob: true
  file: build/cpack/inexor-core-*.zip
  overwrite: true
  on:
    # Deploy only if build was caused by a tag push.
    tags: true
    condition: "$CC = clang"
    repo: inexorgame/inexor-core
